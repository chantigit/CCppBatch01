1.Encapsluation:
================
Def:
	Binding data & functions in a block/class is called as Encapsluation.
syntax:
			class 	ClassName
			{
					AccessModifier  : Data
					+
					AccessModifier	: Functions
			};
	
2.INHERITANCE:
==============
1.Def:
	Creating new class with existing class features is called as INHERITANCE.

2.Representation:
	
	class ClassName1
	{
		//Parent class members
	};
	class ClassName2	:	ClassName1
	{
		//Child class members
	};

3.POLYMORPHISM:
===============
	Poly		->Many 		/Multiple
	Morphing	->Changes 	/ Forms

Def:
	Performing multiple operations having with the same name.

Example:

	A "payment" can be done in multiple ways (credit card/debit card/net banking/Paytm/Google Pay/...)

POLYMORPHISM can be implemented by using
	1.Function Overloading
	2.Function Overriding

i.Function Overloading:
-----------------------
Def:
	Preparing multiple functions in a class with same name & different argument list.
	
R1:Perform sum of 2 int,3 float,4 int,5 float numbers
	
	Solution1:With out Function Overloading
		User has to prepare 4 functions as given below
			sum1(int,int)
			sum2(float,float,float)
			sum3(int,int,int,int)
			sum4(float,float,float,float,float)
	Code:
	#include <iostream>
	class Addition{
	public : void sum1(int a,int b){
      std::cout<<"Sum1 is:"<<(a+b)<<"\n";
	}  
	public : void sum2(float a,float b,float c){
      std::cout<<"Sum2 is:"<<(a+b+c)<<"\n";
  }  
   public : void sum3(int a,int b,int c,int d){
      std::cout<<"Sum3 is:"<<(a+b+c+d)<<"\n";
  } 
   public : void sum4(float a,float b,float c,float d,float e){
      std::cout<<"Sum4 is:"<<(a+b+c+d+e)<<"\n";
  } 
};
int main() {
    Addition ob;
    ob.sum1(1,2);
    ob.sum2(1.1,1.2,1.3);
    ob.sum3(1,2,3,4);
    ob.sum4(1.1,1.2,1.3,1.4,1.5);
    return 0;
}

	Solution2:With Function Overloading
		User has to prepare 4 functions as given below
			sum(int,int)
			sum(float,float,float)
			sum(int,int,int,int)
			sum(float,float,float,float,float)
	Code:
#include <iostream>
class Addition{
  public : void sum(int a,int b){
      std::cout<<"Sum1 is:"<<(a+b)<<"\n";
  }  
  public : void sum(float a,float b,float c){
      std::cout<<"Sum2 is:"<<(a+b+c)<<"\n";
  }  
   public : void sum(int a,int b,int c,int d){
      std::cout<<"Sum3 is:"<<(a+b+c+d)<<"\n";
  } 
   public : void sum(float a,float b,float c,float d,float e){
      std::cout<<"Sum4 is:"<<(a+b+c+d+e)<<"\n";
  } 
};
int main() {
    Addition ob;
    ob.sum(1,2);
    ob.sum(1.1,1.2,1.3);
    ob.sum(1,2,3,4);
    ob.sum(1.1,1.2,1.3,1.4,1.5);
    return 0;
}


Tasks:
=====
overload1.cpp:Perform average of 2 int,3 float numbers
overload2.cpp:Find biggest of 2 int,3 float numbers
overload3.cpp:Perform swapping of 2 int,2 float,2 char numbers

ii.Function Overriding:
-----------------------
Def:
	Preparing same function in parent & child classes, then we can say child function is overrided by parent function.


App1: A program without overrding
In single level inheritance we are preparing parent & child classes with different function names 
i.e wish1() & wish2()

#include <iostream>
class Parent{
    public : void wish1()    {
         std::cout << "Love you mother";
    }
};
class Child : public Parent{
    public : void wish2()    {
         std::cout << "Love you father";
    }
};
int main() {
    Child ob;
    ob.wish1();
    ob.wish2();
    return 0;
}

App2:A program with overrding
In single level inheritance we are preparing parent & child classes with same function names i.e wish()

#include <iostream>
class Parent{
    public : void wish()    {
         std::cout << "Love you mother";
    }
};
class Child : public Parent{
    public : void wish()    {
         std::cout << "Love you father";
    }
};
int main() {
    Child ob;
    ob.wish();  //i.Parent ii.Child iii.None iv.Both
    return 0;
}

Note:
In Function Overriding always child function gets executed.

__________________________________________________
Local & Global varibales inside functions:
==========================================
#include <iostream>
int a=10;           //global variable
void one()          //Function
{
    int b=20;       //local variable
    std::cout<<"Hello from function"<<"\n";
    std::cout<<"a="<<a<<",b="<<b;
}
int main() 
{
    one();          //Calling function
    return 0;
}

this keyword:
=============
Def:
	This keyword always points current object member.
	
Whenever class data & constructor data having same name then to differentiate we use "this" keyword.
Example:

#include <iostream>
class 	Addition
{
	public :  	int n1,n2;
	public : 	Addition(int n1,int n2)  
	{
		this.n1=p1;
		this.n2=p2;
	}
	public :  	void add()
	{
		std::cout<<"Sum is:"<<(n1+n2);
	}
};
int main()
{
    Addition ob(10,20);    
    ob.add();
    return 0;
}
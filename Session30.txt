1.Encapsluation:
================
Def:
	Binding data & functions in a block/class is called as Encapsluation.
syntax:
			class 	ClassName
			{
					AccessModifier  : Data
					+
					AccessModifier	: Functions
			};
	
2.INHERITANCE:
==============
1.Def:
	Creating new class with existing class features is called as INHERITANCE.

2.Representation:
	
	class ClassName1
	{
		//Parent class members
	};
	class ClassName2	:	ClassName1
	{
		//Child class members
	};

3.POLYMORPHISM:
===============
	Poly		->Many 		/Multiple
	Morphing	->Changes 	/ Forms

Def:
	Performing multiple operations having with the same name.

Example:

	A "payment" can be done in multiple ways (credit card/debit card/net banking/Paytm/Google Pay/...)

POLYMORPHISM can be implemented by using
	1.Function Overloading
	2.Function Overriding

====================================================================================
Swapping of 2 int:
==================
#include <iostream>
class ExchangeData
{
    public : void swap(int a,int b)
    {
        std::cout << "Before swap a="<<a<<",b="<<b<<"\n";
        int t=a;    //t=10
        a=b;        //a=20
        b=t;        //b=10
        std::cout << "After swap a="<<a<<",b="<<b<<"\n";
    }
};
int main() {
    ExchangeData ob;
    ob.swap(10,20);
    return 0;
}

this keyword:
=============
Def:
	This keyword always points current object member.
	
Whenever class data & constructor data having same name then to differentiate we use "this" keyword.
Example:

#include <iostream>
class 	Addition
{
	public : int n1,n2;                 //Class Members
	public : Addition(int n1,int n2)    //Constructor Members
	{
	    //ClassMember = ConstructorMember
		this->n1=n1;
		this->n2=n2;
	}
	public :  	void add()
	{
		std::cout<<"Sum is:"<<(n1+n2);
	}
};
int main()
{
    Addition ob(10,20);    
    ob.add();
    return 0;
}


friend keyword:
===============
Def:
	In general, one class private member cannot be exposed/accessed to out side class.
	For suppose one class declared to another as friend, then in that case private member can be exposed/accessed to out side class.

Example:

#include <iostream>
class 	Harish
{
    private : int x=10000;
	public :  	void fun1()
	{
		std::cout<<"fun1 x:"<<x;
	}
	friend class Kyran;
};
class Kyran
{
    public :  	void fun2()
	{   
	    Harish ob;
		std::cout<<"fun2 x:"<<ob.x;
	}
};
int main()
{
    Kyran ob;
    ob.fun2();
    return 0;
}

--------------------------------------------------------------------------------
4.ABSTRACTION:
==============
Def:
	Abstraction is a process,where user is unaware the complex implementation detail of functionality and internal working, 
whereas user is only able to see the basic functionalities and internal details are hidden.

Abstraction is achieved by Access Modifiers inside class:

	1.Private 	: members can exposed to inside class only
	2.Protected	: member can exposed to curent class & it's child class
	3.Public 	: members can exposed to any class

--------------------------------------------------------------------------------
Scope Resolution Operator (::)
===============================
Def:
	TO define a function outside class we use Scope Resolution Operator(::)
syntax:
	class   ClassName1
	{
			//Declaration of function
			access modifier :   returntype   nameoffunction(parameters);		
	};
	//Defining function
	 returntype  ClassName1  ::  nameoffunction(parameters)
	 {
		//body of function
	 }
--------------------------------------------------------------------------------
Req1:Print biggest 		of 2 int,2 float,2 char.
Req2:Print swapping 	of 2 int,2 float,2 char.


Code1:

#include <iostream>
class Big{
    public : void printBigOne(int a,int b)      {
        std::cout<<(a>b?a:b);
    }
    public : void printBigOne(float a,float b)  {
        std::cout<<(a>b?a:b);
    }
    public : void printBigOne(char a,char b)    {
        std::cout<<(a>b?a:b);
    }
};
int main(){
    Big ob;
    ob.printBigOne(10,90);
    ob.printBigOne(10.5f,9.8f);
    ob.printBigOne('A','a');
    return 0;
}


















